<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haosamax</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-14T01:35:03.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>haosamax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux 定时任务 cron</title>
    <link href="http://yoursite.com/2018/07/08/linux-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-cron/"/>
    <id>http://yoursite.com/2018/07/08/linux-定时任务-cron/</id>
    <published>2018-07-08T04:02:02.000Z</published>
    <updated>2018-07-14T01:35:03.532Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间有个任务，为了配合测试，要再周末把服务器时间切到下周一。不能用远程，只能写一个定时任务来执行切日期的shell了。</p><h3 id="crond简介"><a href="#crond简介" class="headerlink" title="crond简介"></a>crond简介</h3><p>crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，<br>并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。<br>Linux下的任务调度分为两类，系统任务调度和用户任务调度。<br>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件<br>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron目录中。其文件名与用户名一致。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>1、将脚本放入uat三台服务器到的目录app/servers/下<br>3、crontab -e<br>按i，将以下<br>0 0 1,2 7 * sh /app/servers/setTimecron.sh<br>贴进去<br>esc，wq保存<br>4、重启 service crond restart</p><p>minute   hour   day   month   week   command     顺序：分 时 日 月 周<br>0            0       1,2       7    *<br>其中：<br>minute： 表示分钟，可以是从0到59之间的任何整数。<br>hour：表示小时，可以是从0到23之间的任何整数。<br>day：表示日期，可以是从1到31之间的任何整数。<br>month：表示月份，可以是从1到12之间的任何整数。<br>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。<br>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</p><p>星号（<em>）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。<br>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”<br>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”<br>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如</em>/10，如果用在minute字段，表示每十分钟执行一次。</p><p>1、编写shell脚本<br>2、利用crontab加入到定时任务队列<br>3、查看作业完成情况</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间有个任务，为了配合测试，要再周末把服务器时间切到下周一。不能用远程，只能写一个定时任务来执行切日期的shell了。&lt;/p&gt;
&lt;h3 id=&quot;crond简介&quot;&gt;&lt;a href=&quot;#crond简介&quot; class=&quot;headerlink&quot; title=&quot;crond简介&quot;&gt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>spring bean lifestyle-BeanPostProcessor</title>
    <link href="http://yoursite.com/2018/07/07/spring-bean-lifestyle-BeanPostProcessor/"/>
    <id>http://yoursite.com/2018/07/07/spring-bean-lifestyle-BeanPostProcessor/</id>
    <published>2018-07-07T12:19:35.000Z</published>
    <updated>2018-07-07T12:55:57.809Z</updated>
    
    <content type="html"><![CDATA[<p>spring提供了许多入口，可以让我们干预bean的整个生命周期。BeanPostProcessor就是这样一个接口，可以再bean初始化之前和初始化之后对bean进行加工处理。</p><pre><code>    // Initialize the bean instance.    Object exposedObject = bean;    try {    //依赖注入        populateBean(beanName, mbd, instanceWrapper);        //        exposedObject = initializeBean(beanName, exposedObject, mbd);    }    catch (Throwable ex) {        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {            throw (BeanCreationException) ex;        }        else {            throw new BeanCreationException(                    mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);        }    }Object result = existingBean;    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {        Object current = beanProcessor.postProcessAfterInitialization(result, beanName);        if (current == null) {            return result;        }        result = current;    }</code></pre><p><br>最近一个实习生找我解决一个问题，在按照套路该配置的配置文件都配置了，该写的实现类也写了，但是项目启动，最后请求从前台到后台，没有找到服务？讲道理我也是没有注意过这些问题，之前就是按照套路配置就可以了，为了那啥，我就坐debug了一番。最后在后台接受到请求，去找对应的服务实现类的时候没找到？本着寻本溯源的思想，我们要看看他怎么没找这个实现类。</p><pre><code>    // Check data before further processing callbackServiceRegistry    CallbackService&lt;?, ?&gt; service = callbackServiceRegistry.getService(requestContext.getRequestServiceId());public class CallbackServiceRegistry implements BeanPostProcessor {protected Log log = LogFactory.getLog(this.getClass());private ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt; callbackServices = new ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt;();public CallbackService&lt;?, ?&gt; getService(String name) {    return callbackServices.get(name);}    @Overridepublic Object postProcessAfterInitialization(Object bean, String name)        throws BeansException {    if (bean instanceof CallbackService) {        if (this.log.isDebugEnabled()) {            this.log                    .debug(&quot;Invoking CallbackService on ProductResolver bean &apos;&quot;                            + name + &quot;&apos;&quot;);        }        this.onBind((CallbackService) bean, name);    }    return bean;}</code></pre><p><br>可以看到他是从一个map中根据服务id获取实现类的。这个registry实现了BeanPostProcessor接口，在bean初始化之后把实现了CallbackService的接口放到map中。再看他的实现类没有实现CallbackService接口，而是实现了QueryService接口，所以从map中无法获取实现类，所以报错。<br>至此，明白了为什么要这么配置，才能生效。同时也学会了debug找问题。一年了，仿佛和一切就在一瞬间就通了，很享受这中debug找问题的过程，以为这样可以让我对整个流程很清楚。这么晚才开窍，也够笨的了~，::&gt;_&lt;::</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring提供了许多入口，可以让我们干预bean的整个生命周期。BeanPostProcessor就是这样一个接口，可以再bean初始化之前和初始化之后对bean进行加工处理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // Initialize the bean insta
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/07/hello-world/"/>
    <id>http://yoursite.com/2018/07/07/hello-world/</id>
    <published>2018-07-07T03:52:47.988Z</published>
    <updated>2018-07-07T06:00:12.652Z</updated>
    
    <content type="html"><![CDATA[<p>:) 国际惯例，Hello world！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;:) 国际惯例，Hello world！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>

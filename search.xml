[{"title":"linux 定时任务 cron","url":"http://yoursite.com/2018/07/08/linux-定时任务-cron/","content":"<p>前端时间有个任务，为了配合测试，要再周末把服务器时间切到下周一。不能用远程，只能写一个定时任务来执行切日期的shell了。</p>\n<p>####crond简介<br>crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，<br>并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。<br>Linux下的任务调度分为两类，系统任务调度和用户任务调度。<br>系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件<br>用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 /var/spool/cron目录中。其文件名与用户名一致。</p>\n<p>####crontab文件的含义：</p>\n<p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：</p>\n<p>minute   hour   day   month   week   command</p>\n<p>其中：<br>minute： 表示分钟，可以是从0到59之间的任何整数。<br>hour：表示小时，可以是从0到23之间的任何整数。<br>day：表示日期，可以是从1到31之间的任何整数。<br>month：表示月份，可以是从1到12之间的任何整数。<br>week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。<br>command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件</p>\n<p><img src=\"https://images0.cnblogs.com/blog/34483/201301/08090352-4e0aa3fe4f404b3491df384758229be1.png\" alt=\"\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>星号（<em>）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。<br>逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”<br>中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”<br>正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如</em>/10，如果用在minute字段，表示每十分钟执行一次。</p>\n<p>步骤：1、先创建shell脚本<br>      2、写cron定时任务</p>\n","categories":[],"tags":["linux"]},{"title":"spring bean lifestyle-BeanPostProcessor","url":"http://yoursite.com/2018/07/07/spring-bean-lifestyle-BeanPostProcessor/","content":"<p>spring提供了许多入口，可以让我们干预bean的整个生命周期。BeanPostProcessor就是这样一个接口，可以再bean初始化之前和初始化之后对bean进行加工处理。</p>\n<pre><code>    // Initialize the bean instance.\n    Object exposedObject = bean;\n    try {\n    //依赖注入\n        populateBean(beanName, mbd, instanceWrapper);\n        //\n        exposedObject = initializeBean(beanName, exposedObject, mbd);\n    }\n    catch (Throwable ex) {\n        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {\n            throw (BeanCreationException) ex;\n        }\n        else {\n            throw new BeanCreationException(\n                    mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);\n        }\n    }\n\nObject result = existingBean;\n    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {\n        Object current = beanProcessor.postProcessAfterInitialization(result, beanName);\n        if (current == null) {\n            return result;\n        }\n        result = current;\n    }\n</code></pre><p><br>最近一个实习生找我解决一个问题，在按照套路该配置的配置文件都配置了，该写的实现类也写了，但是项目启动，最后请求从前台到后台，没有找到服务？讲道理我也是没有注意过这些问题，之前就是按照套路配置就可以了，为了那啥，我就坐debug了一番。最后在后台接受到请求，去找对应的服务实现类的时候没找到？本着寻本溯源的思想，我们要看看他怎么没找这个实现类。</p>\n<pre><code>    // Check data before further processing callbackServiceRegistry\n    CallbackService&lt;?, ?&gt; service = callbackServiceRegistry.getService(requestContext.getRequestServiceId());\n\npublic class CallbackServiceRegistry implements BeanPostProcessor {\n\nprotected Log log = LogFactory.getLog(this.getClass());\nprivate ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt; callbackServices = new ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt;();\n\npublic CallbackService&lt;?, ?&gt; getService(String name) {\n    return callbackServices.get(name);\n}\n\n    @Override\npublic Object postProcessAfterInitialization(Object bean, String name)\n        throws BeansException {\n    if (bean instanceof CallbackService) {\n        if (this.log.isDebugEnabled()) {\n            this.log\n                    .debug(&quot;Invoking CallbackService on ProductResolver bean &apos;&quot;\n                            + name + &quot;&apos;&quot;);\n        }\n        this.onBind((CallbackService) bean, name);\n    }\n\n    return bean;\n}\n</code></pre><p><br>可以看到他是从一个map中根据服务id获取实现类的。这个registry实现了BeanPostProcessor接口，在bean初始化之后把实现了CallbackService的接口放到map中。再看他的实现类没有实现CallbackService接口，而是实现了QueryService接口，所以从map中无法获取实现类，所以报错。<br>至此，明白了为什么要这么配置，才能生效。同时也学会了debug找问题。一年了，仿佛和一切就在一瞬间就通了，很享受这中debug找问题的过程，以为这样可以让我对整个流程很清楚。这么晚才开窍，也够笨的了~，::&gt;_&lt;::</p>\n","categories":[],"tags":["Spring"]},{"title":"Hello World","url":"http://yoursite.com/2018/07/07/hello-world/","content":"<p>:) 国际惯例，Hello world！</p>\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“1994，Spring.”</li>\n<li>“喜欢设计，擅长编程，喜欢睡懒觉.”</li>\n<li>“前端开发工程师，常用 HTML / CSS / JavaScript.”</li>\n</ul>\n</li>\n<li><p>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@haosamax”<br>text_value_url: <a href=\"https://github.com/haosamax\" target=\"_blank\" rel=\"noopener\">https://github.com/haosamax</a></p>\n</li>\n<li><p>type: mail<br>icon: icon-mail<br>text_key: Gmail<br>text_value: “<a href=\"mailto:haosamax@gmail.com\" target=\"_blank\" rel=\"noopener\">haosamax@gmail.com</a>“</p>\n</li>\n<li>type: location<br>icon: icon-location<br>text_value: Beijing</li>\n</ul>\n","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 织网<br>info: 身体和灵魂，总有一个在路上<br>url: <a href=\"http://zheng-ji.info/\" target=\"_blank\" rel=\"noopener\">http://zheng-ji.info/</a><br>avatar: <a href=\"https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</a></li>\n<li>name: Dongyado<br>info: 生命不止，折腾不息<br>url: <a href=\"http://dongyado.com/\" target=\"_blank\" rel=\"noopener\">http://dongyado.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</a></li>\n<li>name: OrangeCoder<br>info: android ffmpeg nodejs gradle<br>url: <a href=\"http://orangecoder.com/\" target=\"_blank\" rel=\"noopener\">http://orangecoder.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</a></li>\n<li>name: EverET<br>info: 好记性不如烂笔头<br>url: <a href=\"http://everet.org/about-me/\" target=\"_blank\" rel=\"noopener\">http://everet.org/about-me/</a><br>avatar: <a href=\"https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]
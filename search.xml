[{"title":"spring bean lifestyle-BeanPostProcessor","url":"http://yoursite.com/2018/07/07/spring-bean-lifestyle-BeanPostProcessor/","content":"<p>spring提供了许多入口，可以让我们干预bean的整个生命周期。BeanPostProcessor就是这样一个接口，可以再bean初始化之前和初始化之后对bean进行加工处理。</p>\n<pre><code>    // Initialize the bean instance.\n    Object exposedObject = bean;\n    try {\n    //依赖注入\n        populateBean(beanName, mbd, instanceWrapper);\n        //\n        exposedObject = initializeBean(beanName, exposedObject, mbd);\n    }\n    catch (Throwable ex) {\n        if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) {\n            throw (BeanCreationException) ex;\n        }\n        else {\n            throw new BeanCreationException(\n                    mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex);\n        }\n    }\n\nObject result = existingBean;\n    for (BeanPostProcessor beanProcessor : getBeanPostProcessors()) {\n        Object current = beanProcessor.postProcessAfterInitialization(result, beanName);\n        if (current == null) {\n            return result;\n        }\n        result = current;\n    }\n</code></pre><p><br>最近一个实习生找我解决一个问题，在按照套路该配置的配置文件都配置了，该写的实现类也写了，但是项目启动，最后请求从前台到后台，没有找到服务？讲道理我也是没有注意过这些问题，之前就是按照套路配置就可以了，为了那啥，我就坐debug了一番。最后在后台接受到请求，去找对应的服务实现类的时候没找到？本着寻本溯源的思想，我们要看看他怎么没找这个实现类。</p>\n<pre><code>    // Check data before further processing callbackServiceRegistry\n    CallbackService&lt;?, ?&gt; service = callbackServiceRegistry.getService(requestContext.getRequestServiceId());\n\npublic class CallbackServiceRegistry implements BeanPostProcessor {\n\nprotected Log log = LogFactory.getLog(this.getClass());\nprivate ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt; callbackServices = new ConcurrentHashMap&lt;String, CallbackService&lt;?, ?&gt;&gt;();\n\npublic CallbackService&lt;?, ?&gt; getService(String name) {\n    return callbackServices.get(name);\n}\n\n    @Override\npublic Object postProcessAfterInitialization(Object bean, String name)\n        throws BeansException {\n    if (bean instanceof CallbackService) {\n        if (this.log.isDebugEnabled()) {\n            this.log\n                    .debug(&quot;Invoking CallbackService on ProductResolver bean &apos;&quot;\n                            + name + &quot;&apos;&quot;);\n        }\n        this.onBind((CallbackService) bean, name);\n    }\n\n    return bean;\n}\n</code></pre><p><br>可以看到他是从一个map中根据服务id获取实现类的。这个registry实现了BeanPostProcessor接口，在bean初始化之后把实现了CallbackService的接口放到map中。再看他的实现类没有实现CallbackService接口，而是实现了QueryService接口，所以从map中无法获取实现类，所以报错。<br>至此，明白了为什么要这么配置，才能生效。同时也学会了debug找问题。一年了，仿佛和一切就在一瞬间就通了，很享受这中debug找问题的过程，以为这样可以让我对整个流程很清楚。这么晚才开窍，也够笨的了~，::&gt;_&lt;::</p>\n","categories":[],"tags":["Spring"]},{"title":"Hello World","url":"http://yoursite.com/2018/07/07/hello-world/","content":"<p>:) 国际惯例，Hello world！</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<p>about:</p>\n<ul>\n<li>type: me<br>icon: icon-user<br>text_value:<ul>\n<li>“1994，Spring.”</li>\n<li>“喜欢设计，擅长编程，喜欢睡懒觉.”</li>\n<li>“前端开发工程师，常用 HTML / CSS / JavaScript.”</li>\n</ul>\n</li>\n<li><p>type: Github<br>icon: icon-github<br>text_key: Github<br>text_value: “@haosamax”<br>text_value_url: <a href=\"https://github.com/haosamax\" target=\"_blank\" rel=\"noopener\">https://github.com/haosamax</a></p>\n</li>\n<li><p>type: mail<br>icon: icon-mail<br>text_key: Gmail<br>text_value: “<a href=\"mailto:haosamax@gmail.com\" target=\"_blank\" rel=\"noopener\">haosamax@gmail.com</a>“</p>\n</li>\n<li>type: location<br>icon: icon-location<br>text_value: Beijing</li>\n</ul>\n","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"<p>link:</p>\n<ul>\n<li>name: 织网<br>info: 身体和灵魂，总有一个在路上<br>url: <a href=\"http://zheng-ji.info/\" target=\"_blank\" rel=\"noopener\">http://zheng-ji.info/</a><br>avatar: <a href=\"https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</a></li>\n<li>name: Dongyado<br>info: 生命不止，折腾不息<br>url: <a href=\"http://dongyado.com/\" target=\"_blank\" rel=\"noopener\">http://dongyado.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</a></li>\n<li>name: OrangeCoder<br>info: android ffmpeg nodejs gradle<br>url: <a href=\"http://orangecoder.com/\" target=\"_blank\" rel=\"noopener\">http://orangecoder.com/</a><br>avatar: <a href=\"https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</a></li>\n<li>name: EverET<br>info: 好记性不如烂笔头<br>url: <a href=\"http://everet.org/about-me/\" target=\"_blank\" rel=\"noopener\">http://everet.org/about-me/</a><br>avatar: <a href=\"https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460\" target=\"_blank\" rel=\"noopener\">https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]